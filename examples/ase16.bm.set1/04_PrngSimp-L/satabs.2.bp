// automatically generated by CPROVER/SATABS

// variables with procedure-global scope


// main
void main() begin

      // the procedure-local variables

  decl b0;                      // LOCAL -- return_value_PseudoRandomUsingAtomic_nex$1 <= 10
  decl b1_nex_return_le_10;     // LOCAL -- nex_return <= 10
  decl b2_nexts_le_10;          // LOCAL -- nexts <= 10
  decl b3_10_eq_nex_return;     // LOCAL -- 10 == nex_return
  decl b4_nex_return_eq_nexts;  // LOCAL -- nex_return == nexts

      // initialization of the shared-global and thread-local variables


 PC0: skip; // location only

    // file <built-in-additions> line 27
 PC1: skip; // no predicates changed

    // file <built-in-additions> line 28
 PC2: skip; // no predicates changed

    // file <built-in-additions> line 30
 PC3: skip; // no predicates changed

    // file ./cav16.bm/04_PrngSimp-L/main.c line 36
 PC4: skip; // no predicates changed

 PC5: skip; // location only

 PC6: skip; // location only

    // file ./cav16.bm/04_PrngSimp-L/main.c line 93 function main
  l1:
 PC7: if 0 then goto l10; fi;

 PC8: start_thread goto l2;

 PC9: goto l9;

  l2:
PC10: skip; // location only

    // file ./cav16.bm/04_PrngSimp-L/main.c line 87 function thr1
PC11: b0 := *;
    // TO Predicates: b0

PC12: skip; // location only

    // file ./cav16.bm/04_PrngSimp-L/main.c line 72 function PseudoRandomUsingAtomic_nex
PC13: skip; // no predicates changed

PC14: b2_nexts_le_10,b4_nex_return_eq_nexts := *,*;
    // TO Predicates: b2_nexts_le_10 b4_nex_return_eq_nexts

PC15: skip; // no predicates changed

PC16: b1_nex_return_le_10,b3_10_eq_nex_return,b4_nex_return_eq_nexts := *,*,*;
    // TO Predicates: b1_nex_return_le_10 b3_10_eq_nex_return b4_nex_return_eq_nexts

    // file ./cav16.bm/04_PrngSimp-L/main.c line 73 function PseudoRandomUsingAtomic_nex
  l3:
PC17: if 0 then goto l8; fi;

    // file ./cav16.bm/04_PrngSimp-L/main.c line 74 function PseudoRandomUsingAtomic_nex
PC18: skip; // no predicates changed

    // file ./cav16.bm/04_PrngSimp-L/main.c line 75 function PseudoRandomUsingAtomic_nex
PC19: skip; // location only

    // file ./cav16.bm/04_PrngSimp-L/main.c line 27 function nC
PC20: skip; // no predicates changed

PC21: skip; // no predicates changed

PC22: skip; // no predicates changed

    // file ./cav16.bm/04_PrngSimp-L/main.c line 30 function nC
  l4:
PC23: skip; // location only

PC24: skip; // no predicates changed

    // file ./cav16.bm/04_PrngSimp-L/main.c line 32 function nC
PC25: if (*) | (*) then goto l4; fi;

    // file ./cav16.bm/04_PrngSimp-L/main.c line 33 function nC
PC26: b2_nexts_le_10,b4_nex_return_eq_nexts := *,*;
    // TO Predicates: b2_nexts_le_10 b4_nex_return_eq_nexts

    // file ./cav16.bm/04_PrngSimp-L/main.c line 34 function nC
PC27: skip; // location only

    // file ./cav16.bm/04_PrngSimp-L/main.c line 76 function PseudoRandomUsingAtomic_nex
PC28: atomic_begin;

PC29: if !(*) then goto l5; fi;

PC30: skip; // no predicates changed

PC31: skip; // no predicates changed

PC32: goto l6;

  l5:
PC33: skip; // no predicates changed

  l6:
PC34: atomic_end;

    // file ./cav16.bm/04_PrngSimp-L/main.c line 78 function PseudoRandomUsingAtomic_nex
PC35: if !(*) then goto l7; fi;

    // file ./cav16.bm/04_PrngSimp-L/main.c line 79 function PseudoRandomUsingAtomic_nex
    // FROM Predicates: b2_nexts_le_10 b3_10_eq_nex_return b4_nex_return_eq_nexts
PC36: b1_nex_return_le_10,b3_10_eq_nex_return,b4_nex_return_eq_nexts := 1,*,*;
    // TO Predicates: b1_nex_return_le_10 b3_10_eq_nex_return b4_nex_return_eq_nexts

    // file ./cav16.bm/04_PrngSimp-L/main.c line 80 function PseudoRandomUsingAtomic_nex
PC37: goto l8;

    // file ./cav16.bm/04_PrngSimp-L/main.c line 73 function PseudoRandomUsingAtomic_nex
  l7:
PC38: goto l3;

    // file ./cav16.bm/04_PrngSimp-L/main.c line 83 function PseudoRandomUsingAtomic_nex
    // FROM Predicates: b1_nex_return_le_10
  l8:
PC39: b0 := b1_nex_return_le_10;
    // TO Predicates: b0

    // file ./cav16.bm/04_PrngSimp-L/main.c line 84 function PseudoRandomUsingAtomic_nex
PC40: skip; // location only

    // file ./cav16.bm/04_PrngSimp-L/main.c line 87 function thr1
PC41: assert(b0);

    // file ./cav16.bm/04_PrngSimp-L/main.c line 88 function thr1
PC42: skip; // location only

    // file ./cav16.bm/04_PrngSimp-L/main.c line 93 function main
PC43: end_thread;

  l9:
PC44: goto l1;

    // file ./cav16.bm/04_PrngSimp-L/main.c line 94 function main
 l10:
PC45: skip; // no predicates changed

PC46: skip; // location only

PC47: skip;

end

// c::__CPROVER_initialize
void c$$__CPROVER_initialize() begin

      // the procedure-local variables

  decl b0;                      // LOCAL -- return_value_PseudoRandomUsingAtomic_nex$1 <= 10
  decl b1_nex_return_le_10;     // LOCAL -- nex_return <= 10
  decl b2_nexts_le_10;          // LOCAL -- nexts <= 10
  decl b3_10_eq_nex_return;     // LOCAL -- 10 == nex_return
  decl b4_nex_return_eq_nexts;  // LOCAL -- nex_return == nexts

end

// c::nC
void c$$nC() begin

      // the procedure-local variables

  decl b0;                      // LOCAL -- return_value_PseudoRandomUsingAtomic_nex$1 <= 10
  decl b1_nex_return_le_10;     // LOCAL -- nex_return <= 10
  decl b2_nexts_le_10;          // LOCAL -- nexts <= 10
  decl b3_10_eq_nex_return;     // LOCAL -- 10 == nex_return
  decl b4_nex_return_eq_nexts;  // LOCAL -- nex_return == nexts

end

// c::rand
void c$$rand() begin

      // the procedure-local variables

  decl b0;                      // LOCAL -- return_value_PseudoRandomUsingAtomic_nex$1 <= 10
  decl b1_nex_return_le_10;     // LOCAL -- nex_return <= 10
  decl b2_nexts_le_10;          // LOCAL -- nexts <= 10
  decl b3_10_eq_nex_return;     // LOCAL -- 10 == nex_return
  decl b4_nex_return_eq_nexts;  // LOCAL -- nex_return == nexts

end

// c::PseudoRandomUsingAtomic_nex
void c$$PseudoRandomUsingAtomic_nex() begin

      // the procedure-local variables

  decl b0;                      // LOCAL -- return_value_PseudoRandomUsingAtomic_nex$1 <= 10
  decl b1_nex_return_le_10;     // LOCAL -- nex_return <= 10
  decl b2_nexts_le_10;          // LOCAL -- nexts <= 10
  decl b3_10_eq_nex_return;     // LOCAL -- 10 == nex_return
  decl b4_nex_return_eq_nexts;  // LOCAL -- nex_return == nexts

end

// c::thr1
void c$$thr1() begin

      // the procedure-local variables

  decl b0;                      // LOCAL -- return_value_PseudoRandomUsingAtomic_nex$1 <= 10
  decl b1_nex_return_le_10;     // LOCAL -- nex_return <= 10
  decl b2_nexts_le_10;          // LOCAL -- nexts <= 10
  decl b3_10_eq_nex_return;     // LOCAL -- 10 == nex_return
  decl b4_nex_return_eq_nexts;  // LOCAL -- nex_return == nexts

end

// c::main
void c$$main() begin

      // the procedure-local variables

  decl b0;                      // LOCAL -- return_value_PseudoRandomUsingAtomic_nex$1 <= 10
  decl b1_nex_return_le_10;     // LOCAL -- nex_return <= 10
  decl b2_nexts_le_10;          // LOCAL -- nexts <= 10
  decl b3_10_eq_nex_return;     // LOCAL -- 10 == nex_return
  decl b4_nex_return_eq_nexts;  // LOCAL -- nex_return == nexts

end

