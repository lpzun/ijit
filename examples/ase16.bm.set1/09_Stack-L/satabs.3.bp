// automatically generated by CPROVER/SATABS

// variables with procedure-global scope

decl b0_0_eq_top;  // 0 == top

// main
void main() begin

      // the procedure-local variables

  decl b1_0_eq_ret;     // LOCAL -- 0 == ret
  decl b2_0_eq_newTop;  // LOCAL -- 0 == newTop

      // initialization of the shared-global and thread-local variables

      b0_0_eq_top:=*; 

 PC0: skip; // location only

    // file <built-in-additions> line 27
 PC1: skip; // no predicates changed

    // file <built-in-additions> line 28
 PC2: skip; // no predicates changed

    // file <built-in-additions> line 30
 PC3: skip; // no predicates changed

    // file ./cav16.bm/09_Stack-L/main.c line 39
 PC4: skip; // no predicates changed

    // file ./cav16.bm/09_Stack-L/main.c line 42
 PC5: skip; // no predicates changed

    // file ./cav16.bm/09_Stack-L/main.c line 44
 PC6: b0_0_eq_top := 1;
    // TO Predicates: b0_0_eq_top

 PC7: skip; // location only

 PC8: skip; // location only

    // file ./cav16.bm/09_Stack-L/main.c line 87 function main
  l1:
 PC9: if 0 then goto l14; fi;

PC10: start_thread goto l2;

PC11: goto l13;

  l2:
PC12: skip; // location only

    // file ./cav16.bm/09_Stack-L/main.c line 81 function thr1
  l3:
PC13: if 0 then goto l12; fi;

PC14: skip; // location only

    // file ./cav16.bm/09_Stack-L/main.c line 67 function push
PC15: skip; // no predicates changed

PC16: skip; // no predicates changed

PC17: skip; // no predicates changed

PC18: b2_0_eq_newTop := *;
    // TO Predicates: b2_0_eq_newTop

PC19: b1_0_eq_ret := *;
    // TO Predicates: b1_0_eq_ret

    // file ./cav16.bm/09_Stack-L/main.c line 68 function push
PC20: atomic_begin;

PC21: if !(*) then goto l4; fi;

PC22: b2_0_eq_newTop := 1;
    // TO Predicates: b2_0_eq_newTop

PC23: goto l5;

  l4:
PC24: b2_0_eq_newTop := *;
    // TO Predicates: b2_0_eq_newTop

PC25: skip; // no predicates changed

  l5:
PC26: atomic_end;

    // file ./cav16.bm/09_Stack-L/main.c line 69 function push
PC27: if !b2_0_eq_newTop then goto l6; fi;

    // file ./cav16.bm/09_Stack-L/main.c line 70 function push
PC28: assume(0);

    // file ./cav16.bm/09_Stack-L/main.c line 71 function push
  l6:
PC29: skip; // no predicates changed

    // file ./cav16.bm/09_Stack-L/main.c line 72 function push
  l7:
PC30: if 0 then goto l11; fi;

    // file ./cav16.bm/09_Stack-L/main.c line 73 function push
PC31: skip; // no predicates changed

    // file ./cav16.bm/09_Stack-L/main.c line 74 function push
PC32: skip; // no predicates changed

    // file ./cav16.bm/09_Stack-L/main.c line 75 function push
PC33: atomic_begin;

PC34: if !(*) then goto l8; fi;

    // FROM Predicates: b2_0_eq_newTop
PC35: b0_0_eq_top := b2_0_eq_newTop;
    // TO Predicates: b0_0_eq_top

PC36: b1_0_eq_ret := 0;
    // TO Predicates: b1_0_eq_ret

PC37: goto l9;

  l8:
PC38: b1_0_eq_ret := 1;
    // TO Predicates: b1_0_eq_ret

  l9:
PC39: atomic_end;

    // file ./cav16.bm/09_Stack-L/main.c line 76 function push
    // FROM Predicates: b1_0_eq_ret
PC40: if b1_0_eq_ret then goto l10; fi;

PC41: goto l11;

    // file ./cav16.bm/09_Stack-L/main.c line 72 function push
 l10:
PC42: goto l7;

    // file ./cav16.bm/09_Stack-L/main.c line 78 function push
 l11:
PC43: skip; // location only

    // file ./cav16.bm/09_Stack-L/main.c line 81 function thr1
PC44: assert(!b0_0_eq_top);

    // file ./cav16.bm/09_Stack-L/main.c line 81 function thr1
PC45: goto l3;

    // file ./cav16.bm/09_Stack-L/main.c line 82 function thr1
 l12:
PC46: skip; // no predicates changed

PC47: skip; // location only

    // file ./cav16.bm/09_Stack-L/main.c line 87 function main
PC48: end_thread;

 l13:
PC49: goto l1;

    // file ./cav16.bm/09_Stack-L/main.c line 88 function main
 l14:
PC50: skip; // no predicates changed

PC51: skip; // location only

PC52: skip;

end

// c::__CPROVER_initialize
void c$$__CPROVER_initialize() begin

      // the procedure-local variables

  decl b1_0_eq_ret;     // LOCAL -- 0 == ret
  decl b2_0_eq_newTop;  // LOCAL -- 0 == newTop

end

// c::push
void c$$push() begin

      // the procedure-local variables

  decl b1_0_eq_ret;     // LOCAL -- 0 == ret
  decl b2_0_eq_newTop;  // LOCAL -- 0 == newTop

end

// c::thr1
void c$$thr1() begin

      // the procedure-local variables

  decl b1_0_eq_ret;     // LOCAL -- 0 == ret
  decl b2_0_eq_newTop;  // LOCAL -- 0 == newTop

end

// c::main
void c$$main() begin

      // the procedure-local variables

  decl b1_0_eq_ret;     // LOCAL -- 0 == ret
  decl b2_0_eq_newTop;  // LOCAL -- 0 == newTop

end

