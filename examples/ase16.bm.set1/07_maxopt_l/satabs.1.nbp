// automatically generated by CPROVER/SATABS

// variables with procedure-global scope


// main
void main() begin

// the procedure-local variables

decl b0_my_max_lt_e;  // LOCAL -- my_max < e

// initialization of the shared-global and thread-local variables


0: skip; // location only

// file <built-in-additions> line 27
1: skip; // no predicates changed

// file <built-in-additions> line 28
2: skip; // no predicates changed

// file <built-in-additions> line 30
3: skip; // no predicates changed

// file ./cav16.bm/07_maxopt_l/main.c line 22
4: skip; // no predicates changed

5: skip; // no predicates changed

// file ./cav16.bm/07_maxopt_l/main.c line 24
6: skip; // no predicates changed

7: skip; // location only

8: skip; // location only

// file ./cav16.bm/07_maxopt_l/main.c line 70 function main
//l1:
9: if 0 then goto 45; fi;

10: start_thread goto 12;

11: goto 44;

//l2:
12: skip; // location only

// file ./cav16.bm/07_maxopt_l/main.c line 57 function thr1
13: skip; // no predicates changed

// file ./cav16.bm/07_maxopt_l/main.c line 60 function thr1
14: assume((*) & (*) & (*));

// file ./cav16.bm/07_maxopt_l/main.c line 65 function thr1
15: skip; // location only

// file ./cav16.bm/07_maxopt_l/main.c line 28 function findMax
16: skip; // no predicates changed

17: skip; // no predicates changed

18: skip; // no predicates changed

// file ./cav16.bm/07_maxopt_l/main.c line 29 function findMax
19: b0_my_max_lt_e := *;
// TO Predicates: b0_my_max_lt_e

// file ./cav16.bm/07_maxopt_l/main.c line 30 function findMax
20: b0_my_max_lt_e := *;
// TO Predicates: b0_my_max_lt_e

21: b0_my_max_lt_e := *;
// TO Predicates: b0_my_max_lt_e

// file ./cav16.bm/07_maxopt_l/main.c line 32 function findMax
22: skip; // no predicates changed

//l3:
23: if * then goto 30; fi;

// file ./cav16.bm/07_maxopt_l/main.c line 34 function findMax
24: b0_my_max_lt_e := *;
// TO Predicates: b0_my_max_lt_e

// file ./cav16.bm/07_maxopt_l/main.c line 39 function findMax
25: if !b0_my_max_lt_e then goto 27; fi;

// file ./cav16.bm/07_maxopt_l/main.c line 40 function findMax
26: b0_my_max_lt_e := 0;
// TO Predicates: b0_my_max_lt_e

// file ./cav16.bm/07_maxopt_l/main.c line 42 function findMax
//l4:
27: assert(!b0_my_max_lt_e);

// file ./cav16.bm/07_maxopt_l/main.c line 32 function findMax
28: skip; // no predicates changed

29: goto 23;

// file ./cav16.bm/07_maxopt_l/main.c line 45 function findMax
//l5:
30: atomic_begin;

// file ./cav16.bm/07_maxopt_l/main.c line 45 function findMax
31: assume(*);

// file ./cav16.bm/07_maxopt_l/main.c line 45 function findMax
32: skip; // no predicates changed

33: atomic_end;

// file ./cav16.bm/07_maxopt_l/main.c line 47 function findMax
34: if * then goto 36; fi;

// file ./cav16.bm/07_maxopt_l/main.c line 48 function findMax
35: skip; // no predicates changed

// file ./cav16.bm/07_maxopt_l/main.c line 51 function findMax
//l6:
36: atomic_begin;

// file ./cav16.bm/07_maxopt_l/main.c line 51 function findMax
37: assume(*);

// file ./cav16.bm/07_maxopt_l/main.c line 51 function findMax
38: skip; // no predicates changed

39: atomic_end;

// file ./cav16.bm/07_maxopt_l/main.c line 53 function findMax
40: assert(*);

// file ./cav16.bm/07_maxopt_l/main.c line 54 function findMax
41: skip; // location only

// file ./cav16.bm/07_maxopt_l/main.c line 66 function thr1
42: skip; // location only

// file ./cav16.bm/07_maxopt_l/main.c line 70 function main
43: end_thread;

//l7:
44: goto 9;

// file ./cav16.bm/07_maxopt_l/main.c line 71 function main
//l8:
45: skip; // no predicates changed

46: skip; // location only

47: skip;

end

// c::__CPROVER_initialize
void c$$__CPROVER_initialize() begin

// the procedure-local variables

decl b0_my_max_lt_e;  // LOCAL -- my_max < e

end

// c::findMax
void c$$findMax() begin

// the procedure-local variables

decl b0_my_max_lt_e;  // LOCAL -- my_max < e

end

// c::thr1
void c$$thr1() begin

// the procedure-local variables

decl b0_my_max_lt_e;  // LOCAL -- my_max < e

end

// c::main
void c$$main() begin

// the procedure-local variables

decl b0_my_max_lt_e;  // LOCAL -- my_max < e

end

