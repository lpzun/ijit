// automatically generated by CPROVER/SATABS

// variables with procedure-global scope

decl b1_1_eq_m;  // 1 == m

// main
void main() begin

      // the procedure-local variables

  decl b0_my_max_lt_e;  // LOCAL -- my_max < e

      // initialization of the shared-global and thread-local variables

      b1_1_eq_m:=*; 

 PC0: skip; // location only

    // file <built-in-additions> line 27
 PC1: skip; // no predicates changed

    // file <built-in-additions> line 28
 PC2: skip; // no predicates changed

    // file <built-in-additions> line 30
 PC3: skip; // no predicates changed

    // file ./cav16.bm/07_maxopt_l/main.c line 22
 PC4: skip; // no predicates changed

 PC5: b1_1_eq_m := 0;
    // TO Predicates: b1_1_eq_m

    // file ./cav16.bm/07_maxopt_l/main.c line 24
 PC6: skip; // no predicates changed

 PC7: skip; // location only

 PC8: skip; // location only

    // file ./cav16.bm/07_maxopt_l/main.c line 70 function main
  l1:
 PC9: if 0 then goto l8; fi;

PC10: start_thread goto l2;

PC11: goto l7;

  l2:
PC12: skip; // location only

    // file ./cav16.bm/07_maxopt_l/main.c line 57 function thr1
PC13: skip; // no predicates changed

    // file ./cav16.bm/07_maxopt_l/main.c line 60 function thr1
PC14: assume((*) & (*) & (*));

    // file ./cav16.bm/07_maxopt_l/main.c line 65 function thr1
PC15: skip; // location only

    // file ./cav16.bm/07_maxopt_l/main.c line 28 function findMax
PC16: skip; // no predicates changed

PC17: skip; // no predicates changed

PC18: skip; // no predicates changed

    // file ./cav16.bm/07_maxopt_l/main.c line 29 function findMax
PC19: b0_my_max_lt_e := *;
    // TO Predicates: b0_my_max_lt_e

    // file ./cav16.bm/07_maxopt_l/main.c line 30 function findMax
PC20: b0_my_max_lt_e := *;
    // TO Predicates: b0_my_max_lt_e

PC21: b0_my_max_lt_e := *;
    // TO Predicates: b0_my_max_lt_e

    // file ./cav16.bm/07_maxopt_l/main.c line 32 function findMax
PC22: skip; // no predicates changed

  l3:
PC23: if * then goto l5; fi;

    // file ./cav16.bm/07_maxopt_l/main.c line 34 function findMax
PC24: b0_my_max_lt_e := *;
    // TO Predicates: b0_my_max_lt_e

    // file ./cav16.bm/07_maxopt_l/main.c line 39 function findMax
PC25: if !b0_my_max_lt_e then goto l4; fi;

    // file ./cav16.bm/07_maxopt_l/main.c line 40 function findMax
PC26: b0_my_max_lt_e := 0;
    // TO Predicates: b0_my_max_lt_e

    // file ./cav16.bm/07_maxopt_l/main.c line 42 function findMax
  l4:
PC27: assert(!b0_my_max_lt_e);

    // file ./cav16.bm/07_maxopt_l/main.c line 32 function findMax
PC28: skip; // no predicates changed

PC29: goto l3;

    // file ./cav16.bm/07_maxopt_l/main.c line 45 function findMax
  l5:
PC30: atomic_begin;

    // file ./cav16.bm/07_maxopt_l/main.c line 45 function findMax
PC31: assume(*);

    // file ./cav16.bm/07_maxopt_l/main.c line 45 function findMax
PC32: b1_1_eq_m := 1;
    // TO Predicates: b1_1_eq_m

PC33: atomic_end;

    // file ./cav16.bm/07_maxopt_l/main.c line 47 function findMax
PC34: if * then goto l6; fi;

    // file ./cav16.bm/07_maxopt_l/main.c line 48 function findMax
PC35: skip; // no predicates changed

    // file ./cav16.bm/07_maxopt_l/main.c line 51 function findMax
  l6:
PC36: atomic_begin;

    // file ./cav16.bm/07_maxopt_l/main.c line 51 function findMax
    // FROM Predicates: b1_1_eq_m
PC37: assume(b1_1_eq_m);

    // file ./cav16.bm/07_maxopt_l/main.c line 51 function findMax
PC38: b1_1_eq_m := 0;
    // TO Predicates: b1_1_eq_m

PC39: atomic_end;

    // file ./cav16.bm/07_maxopt_l/main.c line 53 function findMax
PC40: assert(*);

    // file ./cav16.bm/07_maxopt_l/main.c line 54 function findMax
PC41: skip; // location only

    // file ./cav16.bm/07_maxopt_l/main.c line 66 function thr1
PC42: skip; // location only

    // file ./cav16.bm/07_maxopt_l/main.c line 70 function main
PC43: end_thread;

  l7:
PC44: goto l1;

    // file ./cav16.bm/07_maxopt_l/main.c line 71 function main
  l8:
PC45: skip; // no predicates changed

PC46: skip; // location only

PC47: skip;

end

// c::__CPROVER_initialize
void c$$__CPROVER_initialize() begin

      // the procedure-local variables

  decl b0_my_max_lt_e;  // LOCAL -- my_max < e

end

// c::findMax
void c$$findMax() begin

      // the procedure-local variables

  decl b0_my_max_lt_e;  // LOCAL -- my_max < e

end

// c::thr1
void c$$thr1() begin

      // the procedure-local variables

  decl b0_my_max_lt_e;  // LOCAL -- my_max < e

end

// c::main
void c$$main() begin

      // the procedure-local variables

  decl b0_my_max_lt_e;  // LOCAL -- my_max < e

end

